#!/usr/bin/env python
# -*- coding: utf-8

import abc
import argparse
import evemu
import sys
import os

import datetime

from . import *

class GnuPlot(object):
    @classmethod
    def from_object(self, obj, suffixes = None):
        """
        Creates a new GnuPLot object in a directory named after the object's
        class name, with a timestamp. If suffixes are provided, multiple of
        these objects are created in that directory with the matching
        suffixes.

        The object is sort-of like a file descriptor, best usage:

                gnuplot = GnuPlot.from_object(self)
                with gnuplot as g:
                        g.do_something()

        Parameters
        ----------
            obj: object
                Any object, will be used for the directory and file name
            suffixes : [ s1, s2, ... ]
                A list of string with suffixes to use.
        Return
        ------
            If no suffixes were given, a single GnuPlot object with the
            output named after the object's class name.

            If suffixes were given, a list of GnuPlot objects named after
            the object's class name with the suffix, in the same order as
            the suffixes.
        """
        clsname = obj.__class__.__name__
        if suffixes is None:
            return GnuPlot(clsname)
        else:
            gs = []
            dirname = self._make_date_dir(clsname)
            for s in suffixes:
                name = "{}-{}".format(clsname, s)
                gs.append(GnuPlot(name, dirname = dirname))
            return gs

    @classmethod
    def _make_date_dir(self, path):
        now = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M')
        dirname = "{}-{}".format(now, path)
        os.makedirs(dirname)
        return dirname

    def __init__(self, path, **kwargs):
        # We take the time on init, not on enter so for long-running scripts
        # the start time rather than the finish time.
        try:
            dirname = kwargs["dirname"]
            del kwargs["dirname"]
        except KeyError:
            dirname = self._make_date_dir(path)

        self.path_cmd = "{}/{}.gnuplot".format(dirname, path)
        self.path_data_filename = "{}.dat".format(path)
        self.path_data = "{}/{}".format(dirname, self.path_data_filename)
        self.dirname = dirname
        self.kwargs = kwargs
        self.plots = []
        self.splots = []

    def __enter__(self):

        f = open(self.path_cmd, "w", **self.kwargs)
        f.write("# /usr/bin/gnuplot\n")
        f.write("# Do not edit, generated by {}\n".format(sys.argv[0]))
        f.write("file = '{}'\n".format(self.path_data_filename))
        f.write("set autoscale\n")
        self.file_obj_cmd = f

        f = open(self.path_data, "w", **self.kwargs)
        f.write("# for processing see {}\n".format(self.path_cmd))
        self.file_obj_data = f
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        if exc_value is None:
            if len(self.plots) >= 1:
                self.file_obj_cmd.write("plot file {}\\\n".format(", \\\n     ".join(self.plots)))
            elif len(self.splots) >= 1:
                self.file_obj_cmd.write("splot file {}\n".format(", \\\n    ".join(self.splots)))
            self.file_obj_cmd.write("\npause -1\n")

        self.file_obj_cmd.close()
        self.file_obj_data.close()

        if exc_value is not None:
            os.remove(self.path_cmd)
            os.remove(self.path_data)
            os.rmdir(self.dirname)

    def labels(self, xlabel, ylabel, zlabel = None):
        if xlabel is not None:
            self.file_obj_cmd.write("set xlabel '{}'\n".format(xlabel))
        if ylabel is not None:
            self.file_obj_cmd.write("set ylabel '{}'\n".format(ylabel))
        if zlabel is not None:
            self.file_obj_cmd.write("set zlabel '{}'\n".format(zlabel))

    def ranges(self, xrange, yrange):
        if xrange is not None:
            self.file_obj_cmd.write("set xrange [{}]\n".format(xrange))
        if yrange is not None:
            self.file_obj_cmd.write("set yrange [{}]\n".format(yrange))

    def data(self, string):
        self.file_obj_data.write("{}\n".format(string))

    def comment(self, string):
        self.file_obj_data.write("# {}\n".format(string))

    def plot(self, command):
        self.plots.append(command)

    def splot(self, command):
        self.splots.append(command)

    def cmd(self, command):
        self.file_obj_cmd.write("{}\n".format(command))
